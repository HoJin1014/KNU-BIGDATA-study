import cv2
import numpy as np

# lena = cv2.imread('./lena.bmp')

# # average, gaussian, smooth
# lena_blur = cv2.blur(lena, (3,3))
# lena_gaussian = cv2.GaussianBlur(lena, (3,3), 1.5)
# smooth_filter = np.array([[1/16, 2/16, 1/16], \
#                           [2/16, 4/16, 2/16], \
#                           [1/16, 2/16, 1/16]])
# lena_smooth = cv2.filter2D(lena, -1, smooth_filter)

# cv2.imshow('lena', lena)
# cv2.imshow('lena_blur', lena_blur)
# cv2.imshow('lena_gaussian', lena_gaussian)
# cv2.imshow('lena_smooth', lena_smooth)
# cv2.waitKey(0)
# cv2.destroyAllWindows()
# # ----------------------------------------------------------

# # Spatial filter I - Image enhancement
# lena = cv2.imread('./lena.bmp')

# sharpen_filter = np.array([[0, -1, 0], \
#                           [-1, 5, -1], \
#                           [0, -1, 0]])
# lena_sharpen = cv2.filter2D(lena, -1, sharpen_filter)
# cv2.imshow('lena', lena)
# cv2.imshow('lena_sharpen', lena_sharpen)
# cv2.waitKey(0)
# cv2.destroyAllWindows()
# # ----------------------------------------------------------

# Spatial filter III - Image segmentation
# aespa = cv2.imread('./aespa.jpg')
# aespa_gray = cv2.cvtColor(aespa, cv2.COLOR_BGR2GRAY)
# aespa_gray = cv2.resize(aespa_gray, (0, 0), fx=0.4, fy=0.4, interpolation=cv2.INTER_CUBIC)

# aespa_sobel_x = cv2.Sobel(aespa_gray, cv2.CV_32F, 1, 0)
# aespa_sobel_y = cv2.Sobel(aespa_gray, cv2.CV_32F, 0, 1)
# aespa_sobel = cv2.magnitude(aespa_sobel_x, aespa_sobel_y)
# aespa_sobel_x = np.abs(aespa_sobel_x)                             #
# aespa_sobel_x = np.clip(aespa_sobel_x, 0, 255).astype(np.uint8)
# aespa_sobel_y = np.abs(aespa_sobel_y)
# aespa_sobel_y = np.clip(aespa_sobel_y, 0, 255).astype(np.uint8)   #
# aespa_sobel = np.clip(aespa_sobel, 0, 255).astype(np.uint8)
# cv2.imshow('aespa_gray', aespa_gray)
# cv2.imshow('aespa_sobel_x', aespa_sobel_x)
# cv2.imshow('aespa_sobel_y', aespa_sobel_y)
# cv2.imshow('aespa_sobel', aespa_sobel)
# cv2.waitKey(0)
# cv2.destroyAllWindows()
# ----------------------------------------------------------

# Morphological operation - Example
# bi_img = cv2.imread('./morphology.jpg')

# erode_k = cv2.getStructuringElement(cv2.MORPH_RECT, (5, 5))
# erosion = cv2.erode(bi_img, erode_k)

# dilate_k = cv2.getStructuringElement(cv2.MORPH_RECT, (5, 5))
# dilation = cv2.dilate(bi_img, dilate_k)

# cv2.imshow('bi_img', bi_img)
# cv2.imshow('erode', erosion)
# cv2.imshow('dilate', dilation)
# cv2.waitKey(0)
# cv2.destroyAllWindows()
# ----------------------------------------------------------

# Labeling - Example
# blob_img = cv2.imread('./blob.bmp')
# blob_gray = cv2.cvtColor(blob_img, cv2.COLOR_BGR2GRAY)
# _, blob_bin = cv2.threshold(blob_gray, -1, 255, cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)

# _, labels, stats, centroids = cv2.connectedComponentsWithStats(blob_bin)
# for i, rec in enumerate(stats):
#     x, y, w, h, area = rec
#     cv2.rectangle(blob_img, (x, y, w, h), (0, 0, 255))

# cv2.imshow('blob_bin', blob_bin)
# cv2.imshow('blob_img', blob_img)
# cv2.waitKey(0)
# cv2.destroyAllWindows()
# ----------------------------------------------------------

# find contour (많이 쓰는 함수)
# blob_img = cv2.imread('./findcontours.png')
# blob_gray = cv2.cvtColor(blob_img, cv2.COLOR_BGR2GRAY)

# contour, hierarchy = cv2.findContours(blob_gray, cv2.RETR_TREE, \
#                                                 cv2.CHAIN_APPROX_NONE)
# for i, cnt in enumerate(contour):
#     cv2.drawContours(blob_img, [cnt], 0, (0, 0, 255))

# cv2.imshow('blob_img', blob_img)
# cv2.imshow('blob_gray', blob_gray)
# cv2.waitKey(0)
# cv2.destroyAllWindows()
# ----------------------------------------------------------

# convex hull
# blob_img = cv2.imread('./blob.bmp')
# blob_gray = cv2.cvtColor(blob_img, cv2.COLOR_BGR2GRAY)
# _, blob_bin = cv2.threshold(blob_gray, -1, 255, cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)

# contour, hierarchy = cv2.findContours(blob_bin, cv2.RETR_LIST, \
#                                                 cv2.CHAIN_APPROX_NONE)

# for i, cnt in enumerate(contour):
#     hull = cv2.convexHull(cnt)
#     cv2.drawContours(blob_img, [hull], 0, (0, 0, 255))

# cv2.imshow('blob_img', blob_img)
# cv2.imshow('blob_gray', blob_bin)
# cv2.waitKey(0)
# cv2.destroyAllWindows()
# ----------------------------------------------------------

# moment
# blob_img = cv2.imread('./blob.bmp')
# blob_gray = cv2.cvtColor(blob_img, cv2.COLOR_BGR2GRAY)
# _, blob_bin = cv2.threshold(blob_gray, -1, 255, cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)

# contour, hierarchy = cv2.findContours(blob_bin, cv2.RETR_LIST, \
#                                                 cv2.CHAIN_APPROX_NONE)

# for i, cnt in enumerate(contour):
#     M = cv2.moments(cnt)
#     cX = int(M['m10'] / M['m00'])
#     cY = int(M['m01'] / M['m00'])
#     cv2.circle(blob_img, (cX, cY), 1, (0, 255, 0), -1)
#     cv2.drawContours(blob_img, [cnt], 0, (0, 0, 255))

# cv2.imshow('blob_img', blob_img)
# cv2.imshow('blob_gray', blob_bin)
# cv2.waitKey(0)
# cv2.destroyAllWindows()
# ----------------------------------------------------------

# Template matching
alphabet_img = cv2.imread('./alphabet.bmp')
A_img = cv2.imread('./A.bmp')
alphabet_img = cv2.cvtColor(alphabet_img, cv2.COLOR_BGR2GRAY)
A_img = cv2.cvtColor(A_img, cv2.COLOR_BGR2GRAY)

TM_SQDIFF_ret = cv2.matchTemplate(alphabet_img, A_img, cv2.TM_SQDIFF)
min_val_diff, max_val_diff, min_loc_diff, max_loc_diff = cv2.minMaxLoc(TM_SQDIFF_ret)
h, w = A_img.shape
cv2.rectangle(alphabet_img, (min_loc_diff[0], max_loc_diff[1]), (min_loc_diff[0]+w, min_loc_diff[1]+h), (128,128,128))
print('min_loc_diff:', min_loc_diff)

cv2.imshow('alphabet', alphabet_img)
cv2.imshow('A_img', A_img)
cv2.imshow('TM_SQDIFF_ret', TM_SQDIFF_ret/np.max(TM_SQDIFF_ret))
cv2.waitKey(0)
cv2.destroyAllWindows()
# ----------------------------------------------------------